---
Description: CornChat API

Parameters:
  AppName:
    Type: String
    Default: TestCornChat
    Description: Base name used to generate unique names for resources, e.g. ProdCornChat or TestCornChat
    MinLength: 3
    MaxLength: 20
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9_]*$'

Outputs:
  IdentityPool:
    Description: The Cognito Identity Pool
    Value: !Ref IdentityPool
  DynamoDBTableNameMsgInfo:
    Description: The name of the DynamoDB MsgInfo Table
    Value: !Ref DynamoDBTableMsgInfo
  DynamoDBTableNameApiTokens:
    Description: The name of the DynamoDB ApiTokens Table
    Value: !Ref DynamoDBTableApiTokens
  GraphQLApiEndpoint:
    Description: The URL to the GraphQL Endpoint
    Value: !GetAtt GraphQLApi.GraphQLUrl
  GraphQLApiId:
    Description: The API ID of the GraphQL API
    Value: !GetAtt GraphQLApi.ApiId

Resources:

############### DYNAMODB

  AppSyncDynamoDBRole:
    Type: AWS::IAM::Role
    DependsOn:
      - AppSyncDynamoDBPolicy
    Properties:
      RoleName: !Sub ${AppName}-DynamoDB
      ManagedPolicyArns:
        - Ref: AppSyncDynamoDBPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com

  AppSyncDynamoDBPolicy:
    Type: AWS::IAM::ManagedPolicy
    DependsOn:
      - DynamoDBTableMsgInfo
    Properties:
      Description: Managed policy to allow AWS AppSync data source to access the tables created by this template.
      Path: /appsync/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:UpdateItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
            Resource: !Join [ "", [ !GetAtt DynamoDBTableMsgInfo.Arn, "/*" ] ]

  DynamoDBTableMsgInfo:
    Type: "AWS::DynamoDB::Table"
    Description: "Data store for chat messages"
    Properties:
      TableName: !Sub ${AppName}_MsgInfo
      AttributeDefinitions:
        - AttributeName: "mid"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "mid"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 1

  DynamoDBTableApiTokens:
    Type: "AWS::DynamoDB::Table"
    Description: "Data store for CornChat API Tokens"
    Properties:
      TableName: !Sub ${AppName}_ApiTokens
      AttributeDefinitions:
        - AttributeName: "apiToken"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "apiToken"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 1


############## COGNITO IDENTITY POOL

  IdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: !Sub ${AppName}IdentityPool
      AllowUnauthenticatedIdentities: true
      DeveloperProviderName: !Sub login.${AppName}

  IdentityPoolRoleAttachment:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    DependsOn:
      - IdentityPool
      - CognitoAuthorizedUserRole
      - CognitoUnAuthorizedUserRole
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedUserRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedUserRole.Arn

  CognitoAuthorizedUserRole:
    Type: AWS::IAM::Role
    DependsOn:
      - CognitoAuthorizedUserPolicy
    Properties:
      RoleName: !Sub ${AppName}-CognitoAuthorizedUser
      ManagedPolicyArns:
        - Ref: CognitoAuthorizedUserPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRoleWithWebIdentity"
            Sid: ""
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": "authenticated"
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com

  CognitoAuthorizedUserPolicy:
    Type: AWS::IAM::ManagedPolicy
    DependsOn:
      - LoginLambda
      - GenerateTokenLambda
    Properties:
      Description: Managed policy for Authorized CornChat users.
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: "lambda:InvokeFunction"
            Resource:
              - !GetAtt LoginLambda.Arn
              - !GetAtt GenerateTokenLambda.Arn
          - Effect: Allow
            Action: "appsync:GraphQL"
            Resource:
              - !Join [ "", [ !GetAtt GraphQLApi.Arn, "/*" ] ]
                #- "arn:aws:appsync:us-east-1:452684070979:apis/g7n54bvl2fh4djuu6dvmgljlre/*"
          - Effect: Allow
            Resource: "*"
            Action:
              - "mobileanalytics:PutEvents"
              - "cognito-sync:*"


  CognitoUnAuthorizedUserRole:
    Type: AWS::IAM::Role
    DependsOn:
      - CognitoUnAuthorizedUserPolicy
    Properties:
      RoleName: !Sub ${AppName}-CognitoUnAuthorizedUser
      ManagedPolicyArns:
        - Ref: CognitoUnAuthorizedUserPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRoleWithWebIdentity"
            Sid: ""
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Condition:
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": "unauthenticated"

  CognitoUnAuthorizedUserPolicy:
    Type: AWS::IAM::ManagedPolicy
    DependsOn:
      - LoginLambda
      - GenerateTokenLambda
    Properties:
      Description: Managed policy for UnAuthorized CornChat users
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: "lambda:InvokeFunction"
            Resource:
              - !GetAtt LoginLambda.Arn
              - !GetAtt GenerateTokenLambda.Arn
          - Effect: Allow
            Resource: "*"
            Action:
              - "mobileanalytics:PutEvents"
              - "cognito-sync:*"




######################## APPSYNC ######################



  GraphQLApi:
    Type: "AWS::AppSync::GraphQLApi"
    Description: "The GraphQL API for the CornChat App"
    Properties:
      AuthenticationType: "AWS_IAM"
      Name: !Sub ${AppName}API

  MsgInfoDataSource:
    Type: "AWS::AppSync::DataSource"
    DependsOn:
      - DynamoDBTableMsgInfo
      - AppSyncDynamoDBRole
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: !Sub ${AppName}_MsgInfo
      Description: "The MsgInfo AppSync DynamoDB Data Source"
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBRole.Arn
      DynamoDBConfig:
        TableName: !Ref DynamoDBTableMsgInfo
        AwsRegion: !Sub ${AWS::Region}


############# GRAPHQL #############

  GraphQLSchema:
    Type: "AWS::AppSync::GraphQLSchema"
    DependsOn:
      - GraphQLApi
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Definition: |
<% cat ./graphql/schema.gql | sed 's/^/        /' %>

  GetMsgInfoResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: getMsgInfo
      DataSourceName: !GetAtt MsgInfoDataSource.Name
<% cat ./graphql/resolvers/getMsgInfo.yaml | sed 's/^/      /' %>

  GetMsgInfosResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: getMsgInfos
      DataSourceName: !GetAtt MsgInfoDataSource.Name
<% cat ./graphql/resolvers/getMsgInfos.yaml | sed 's/^/      /' %>

  AddTagResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: addTag
      DataSourceName: !GetAtt MsgInfoDataSource.Name
<% cat ./graphql/resolvers/addTag.yaml | sed 's/^/      /' %>

  AddReactionResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: addReaction
      DataSourceName: !GetAtt MsgInfoDataSource.Name
<% cat ./graphql/resolvers/addReaction.yaml | sed 's/^/      /' %>


############# LAMBDAS #############

  GenerateTokenLambda:
    Type: "AWS::Lambda::Function"
    DependsOn:
      - GenerateTokenRole
      - GenerateTokenPolicy
    Properties:
      FunctionName: !Sub ${AppName}-GenerateTokenLambda
      Description: Allow users to generate a CornChat API token by providing a valid HipChat User ID and HipChat OAuth token
      Code:
        S3Bucket: "cornchat-private"
        S3Key: !Sub "cloudformation/${AppName}-stack/lambda/GenerateToken.js"
      Role: !GetAtt GenerateTokenRole.Arn
      Timeout: 10
      Handler: "index.handler"
      Runtime: "nodejs8.10"
      MemorySize: 128

  GenerateTokenPolicy:
    Type: AWS::IAM::ManagedPolicy
    DependsOn:
      - DynamoDBTableApiTokens
    Properties:
      Description: Specifies which resources the "GenerateToken" lambda function can access.
      Path: /appsync/
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Resource: !GetAtt DynamoDBTableApiTokens.Arn
          - Effect: Allow
            Sid: ""
            Resource: "*"
            Action:
              - "logs:*"

  GenerateTokenRole:
    Type: AWS::IAM::Role
    DependsOn:
      - GenerateTokenPolicy
    Properties:
      RoleName: !Sub ${AppName}-GenerateToken
      ManagedPolicyArns:
        - Ref: GenerateTokenPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com

  LoginLambda:
    Type: "AWS::Lambda::Function"
    DependsOn:
      - LoginLambdaRole
      - LoginLambdaPolicy
    Properties:
      FunctionName: !Sub ${AppName}-LoginLambda
      Description: Allow users to login with a CornChat API Token and get a federated Cognito session token.
      Code:
        S3Bucket: "cornchat-private"
        S3Key: !Sub "cloudformation/${AppName}-stack/lambda/Login.js"
      Role: !GetAtt LoginLambdaRole.Arn
      Timeout: 10
      Handler: "index.handler"
      Runtime: "nodejs8.10"
      MemorySize: 128

  LoginLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    DependsOn:
      - IdentityPool
      - DynamoDBTableApiTokens
    Properties:
      Description: Specifies which resources the "Login" lambda function can access.
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
            Resource: !GetAtt DynamoDBTableApiTokens.Arn
          - Effect: Allow
            Action:
              - "cognito-identity:GetOpenIdTokenForDeveloperIdentity"
            Resource: !Join
              - ''
              - - "arn:aws:cognito-identity:"
                - !Ref AWS::Region
                - ':'
                - !Ref AWS::AccountId
                - ":identitypool/"
                - !Ref IdentityPool
          - Effect: Allow
            Sid: ""
            Resource: "*"
            Action:
              - "logs:*"

  LoginLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - LoginLambdaPolicy
    Properties:
      RoleName: !Sub ${AppName}-LoginLambda
      ManagedPolicyArns:
        - Ref: LoginLambdaPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
