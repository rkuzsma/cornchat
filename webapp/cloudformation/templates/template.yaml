---
Description: CornChat API

Parameters:
  AppName:
    Type: String
    Default: TestCornChat
    Description: Base name used to generate unique names for resources, e.g. ProdCornChat or TestCornChat
    MinLength: 3
    MaxLength: 20
    AllowedPattern: '^[a-zA-Z][a-zA-Z0-9_]*$'
  LambdaS3Bucket:
    Type: String
    Default: cornchat
    Description: Name of S3 bucket where Lambda source files are stored
  LambdaS3Folder:
    Type: String
    Default: private/cloudformation/TestCornChat/lambda
    Description: Path to folder within LambdaS3Bucket where Lambda source files are stored
  PublicConfigS3Bucket:
    Type: String
    Default: cornchat
    Description: S3 bucket name for the PublicConfigS3Folder
  PublicConfigS3Folder:
    Type: String
    Default: public/TestCornChat/public-config
    Description: Path within PublicConfigS3Bucket to use for storing public information about the provisioned stack such as identity pool ID and GraphQL API endpoint.

Outputs:
  IdentityPool:
    Description: The Cognito Identity Pool
    Value: !Ref IdentityPool
  DynamoDBTableNameMsgInfo:
    Description: The name of the DynamoDB MsgInfo Table
    Value: !Ref DynamoDBTableMsgInfo
  GraphQLApiEndpoint:
    Description: The URL to the GraphQL Endpoint
    Value: !GetAtt GraphQLApi.GraphQLUrl
  GraphQLApiId:
    Description: The API ID of the GraphQL API
    Value: !GetAtt GraphQLApi.ApiId

Resources:

############### DYNAMODB

  AppSyncDynamoDBRole:
    Type: AWS::IAM::Role
    DependsOn:
      - AppSyncDynamoDBPolicy
    Properties:
      RoleName: !Sub ${AppName}-DynamoDB
      ManagedPolicyArns:
        - Ref: AppSyncDynamoDBPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com

  AppSyncDynamoDBPolicy:
    Type: AWS::IAM::ManagedPolicy
    DependsOn:
      - DynamoDBTableMsgInfo
    Properties:
      Description: Managed policy to allow AWS AppSync data source to access the tables created by this template.
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:GetItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
              - dynamodb:UpdateItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchGetItem
              - dynamodb:BatchWriteItem
            Resource: !GetAtt DynamoDBTableMsgInfo.Arn

  DynamoDBTableMsgInfo:
    Type: "AWS::DynamoDB::Table"
    Description: "Data store for chat messages"
    Properties:
      TableName: !Sub ${AppName}_MsgInfo
      AttributeDefinitions:
        - AttributeName: "mid"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "mid"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 1

# For Auto-Scaling DynamoDB tables:

  DynamoDBScalingRole:
    Type: "AWS::IAM::Role"
    Properties:
     AssumeRolePolicyDocument:
      Version: "2012-10-17"
      Statement:
       -
        Effect: Allow
        Principal:
         Service:
          -
           "application-autoscaling.amazonaws.com"
        Action:
         -
          "sts:AssumeRole"
     Path: "/"
     Policies:
      -
       PolicyName: root
       PolicyDocument:
        Version: "2012-10-17"
        Statement:
         -
          Effect: Allow
          Action:
           - "dynamodb:DescribeTable"
           - "dynamodb:UpdateTable"
           - "cloudwatch:PutMetricAlarm"
           - "cloudwatch:DescribeAlarms"
           - "cloudwatch:GetMetricStatistics"
           - "cloudwatch:SetAlarmState"
           - "cloudwatch:DeleteAlarms"
          Resource: "*"

  DynamoDBTableMsgInfoReadCapacityScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    DependsOn:
      - DynamoDBScalingRole
      - DynamoDBTableMsgInfo
    Properties:
      MinCapacity: 2
      MaxCapacity: 50
      ResourceId: !Sub table/${AppName}_MsgInfo
      RoleARN: !GetAtt DynamoDBScalingRole.Arn
      ScalableDimension: "dynamodb:table:ReadCapacityUnits"
      ServiceNamespace: dynamodb

  DynamoDBTableMsgInfoReadScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    DependsOn:
      - DynamoDBTableMsgInfoReadCapacityScalableTarget
    Properties:
      PolicyName: ReadAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: DynamoDBTableMsgInfoReadCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBReadCapacityUtilization

  DynamoDBTableMsgInfoWriteCapacityScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    DependsOn:
      - DynamoDBScalingRole
      - DynamoDBTableMsgInfo
    Properties:
      MinCapacity: 1
      MaxCapacity: 3
      ResourceId: !Sub table/${AppName}_MsgInfo
      RoleARN: !GetAtt DynamoDBScalingRole.Arn
      ScalableDimension: "dynamodb:table:WriteCapacityUnits"
      ServiceNamespace: dynamodb

  DynamoDBTableMsgInfoWriteScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    DependsOn:
      - DynamoDBTableMsgInfoWriteCapacityScalableTarget
    Properties:
      PolicyName: WriteAutoScalingPolicy
      PolicyType: TargetTrackingScaling
      ScalingTargetId:
        Ref: DynamoDBTableMsgInfoWriteCapacityScalableTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70
        ScaleInCooldown: 60
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: DynamoDBWriteCapacityUtilization


############## COGNITO IDENTITY POOL

  IdentityPool:
    Type: "AWS::Cognito::IdentityPool"
    Properties:
      IdentityPoolName: !Sub ${AppName}IdentityPool
      AllowUnauthenticatedIdentities: true
      DeveloperProviderName: !Sub login.${AppName}

  IdentityPoolRoleAttachment:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    DependsOn:
      - IdentityPool
      - CognitoAuthorizedUserRole
      - CognitoUnAuthorizedUserRole
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt CognitoAuthorizedUserRole.Arn
        unauthenticated: !GetAtt CognitoUnAuthorizedUserRole.Arn

  CognitoAuthorizedUserRole:
    Type: AWS::IAM::Role
    DependsOn:
      - CognitoAuthorizedUserPolicy
    Properties:
      RoleName: !Sub ${AppName}-CognitoAuthorizedUser
      ManagedPolicyArns:
        - Ref: CognitoAuthorizedUserPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRoleWithWebIdentity"
            Sid: ""
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Condition:
              StringEquals:
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": "authenticated"
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com

  CognitoAuthorizedUserPolicy:
    Type: AWS::IAM::ManagedPolicy
    DependsOn:
      - AuthenticateLambda
    Properties:
      Description: Managed policy for Authorized CornChat users.
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: "lambda:InvokeFunction"
            Resource:
              - !GetAtt AuthenticateLambda.Arn
          - Effect: Allow
            Action: "appsync:GraphQL"
            Resource:
              - !Join [ "", [ !GetAtt GraphQLApi.Arn, "/*" ] ]
                #- "arn:aws:appsync:us-east-1:452684070979:apis/g7n54bvl2fh4djuu6dvmgljlre/*"
          - Effect: Allow
            Resource: "*"
            Action:
              - "mobileanalytics:PutEvents"
              - "cognito-sync:*"


  CognitoUnAuthorizedUserRole:
    Type: AWS::IAM::Role
    DependsOn:
      - CognitoUnAuthorizedUserPolicy
    Properties:
      RoleName: !Sub ${AppName}-CognitoUnAuthorizedUser
      ManagedPolicyArns:
        - Ref: CognitoUnAuthorizedUserPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: "sts:AssumeRoleWithWebIdentity"
            Sid: ""
            Principal:
              Federated: "cognito-identity.amazonaws.com"
            Condition:
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": "unauthenticated"

  CognitoUnAuthorizedUserPolicy:
    Type: AWS::IAM::ManagedPolicy
    DependsOn:
      - AuthenticateLambda
    Properties:
      Description: Managed policy for UnAuthorized CornChat users
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: "lambda:InvokeFunction"
            Resource:
              - !GetAtt AuthenticateLambda.Arn
          - Effect: Allow
            Resource: "*"
            Action:
              - "mobileanalytics:PutEvents"
              - "cognito-sync:*"




######################## APPSYNC ######################



  GraphQLApi:
    Type: "AWS::AppSync::GraphQLApi"
    DependsOn:
      - CloudWatchLogsRole
    Description: "The GraphQL API for the CornChat App"
    Properties:
      AuthenticationType: "AWS_IAM"
      Name: !Sub ${AppName}API
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt CloudWatchLogsRole.Arn
        FieldLogLevel: ALL

  MsgInfoDataSource:
    Type: "AWS::AppSync::DataSource"
    DependsOn:
      - DynamoDBTableMsgInfo
      - AppSyncDynamoDBRole
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: !Sub ${AppName}_MsgInfo
      Description: "The MsgInfo AppSync DynamoDB Data Source"
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDynamoDBRole.Arn
      DynamoDBConfig:
        TableName: !Ref DynamoDBTableMsgInfo
        AwsRegion: !Sub ${AWS::Region}

  CloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AppName}-CloudWatchLogs
      ManagedPolicyArns:
        - Ref: CloudWatchLogsPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com

  CloudWatchLogsPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Managed policy to allow AWS GraphQL API to write to CloudWatch logs.
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:DescribeLogStreams
              - logs:FilterLogEvents
              - logs:PutLogEvents
            Resource: "*"
            # !Join
            #   - ''
            #   - - "arn:aws:logs:"
            #     - !Ref AWS::Region
            #     - ':'
            #     - !Ref AWS::AccountId
            #     - ":*"
            #     # "arn:aws:logs:us-east-1:452684070979:*"

############# GRAPHQL #############

  GraphQLSchema:
    Type: "AWS::AppSync::GraphQLSchema"
    DependsOn:
      - GraphQLApi
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Definition: |
<% cat ./graphql/schema.gql | sed 's/^/        /' %>

  GetMsgInfoResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: getMsgInfo
      DataSourceName: !GetAtt MsgInfoDataSource.Name
<% cat ./graphql/resolvers/getMsgInfo.yaml | sed 's/^/      /' %>

  ListMsgInfosResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: listMsgInfos
      DataSourceName: !GetAtt MsgInfoDataSource.Name
<% cat ./graphql/resolvers/listMsgInfos.yaml | sed 's/^/      /' %>

  AddTagResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: addTag
      DataSourceName: !GetAtt MsgInfoDataSource.Name
<% cat ./graphql/resolvers/addTag.yaml | sed 's/^/      /' %>

  AddReactionResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: addReaction
      DataSourceName: !GetAtt MsgInfoDataSource.Name
<% cat ./graphql/resolvers/addReaction.yaml | sed 's/^/      /' %>

  RemoveReactionResolver:
    Type: "AWS::AppSync::Resolver"
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: removeReaction
      DataSourceName: !GetAtt MsgInfoDataSource.Name
<% cat ./graphql/resolvers/removeReaction.yaml | sed 's/^/      /' %>


############# LAMBDAS #############

  AuthenticateLambda:
    Type: "AWS::Lambda::Function"
    DependsOn:
      - AuthenticateRole
      - AuthenticatePolicy
      - IdentityPool
    Properties:
      FunctionName: !Sub ${AppName}-AuthenticateLambda
      Description: Allow users to authenticate with CornChat by providing a valid HipChat User ID and HipChat OAuth token.
      Code:
        S3Bucket: !Sub ${LambdaS3Bucket}
        S3Key: !Sub ${LambdaS3Folder}/Authenticate.zip
      Environment:
        Variables:
          CORNCHAT_IDENTITY_POOL_ID: !Ref IdentityPool
          CORNCHAT_IDENTITY_POOL_DEVELOPER_PROVIDER_NAME: !Sub login.${AppName}
      Role: !GetAtt AuthenticateRole.Arn
      Timeout: 10
      Handler: "index.handler"
      Runtime: "nodejs8.10"
      MemorySize: 128

  AuthenticatePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Specifies which resources the "Authenticate" lambda function can access.
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Resource: "arn:aws:logs:::*"
            Action:
              - "logs:*"
          - Effect: Allow
            Action:
              - "cognito-identity:GetOpenIdTokenForDeveloperIdentity"
            Resource: !Join
              - ''
              - - "arn:aws:cognito-identity:"
                - !Ref AWS::Region
                - ':'
                - !Ref AWS::AccountId
                - ":identitypool/"
                - !Ref IdentityPool

  AuthenticateRole:
    Type: AWS::IAM::Role
    DependsOn:
      - AuthenticatePolicy
    Properties:
      RoleName: !Sub ${AppName}-Authenticate
      ManagedPolicyArns:
        - Ref: AuthenticatePolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com

  # Publish public env config to, e.g. https://s3.amazonaws.com/cornchat/public/TestCornChat/public-config/config.json
  WritePublicConfigLambda:
    Type: "AWS::Lambda::Function"
    DependsOn:
      - GraphQLApi
      - IdentityPool
      - WritePublicConfigLambdaRole
      - WritePublicConfigLambdaPolicy
    Properties:
      FunctionName: !Sub ${AppName}-WritePublicConfigLambda
      Description: Publish a config.json file to a publicly accessible S3 bucket folder containing publicly allowed information about the stack, such as Identity Pool ID and GraphQL API endpoint URL.
      Code:
        S3Bucket: !Sub ${LambdaS3Bucket}
        S3Key: !Sub ${LambdaS3Folder}/WritePublicConfig.zip
      Environment:
        Variables:
          CORNCHAT_APP_NAME: !Sub ${AppName}
          CORNCHAT_AWS_REGION: !Sub ${AWS::Region}
          CORNCHAT_IDENTITY_POOL_ID: !Ref IdentityPool
          CORNCHAT_GRAPHQL_ENDPOINT_URL: !GetAtt GraphQLApi.GraphQLUrl
          CORNCHAT_IDENTITY_POOL_DEVELOPER_PROVIDER_NAME: !Sub login.${AppName}
          PublicConfigS3Bucket: !Sub ${PublicConfigS3Bucket}
          PublicConfigS3Folder: !Sub ${PublicConfigS3Folder}
      Role: !GetAtt WritePublicConfigLambdaRole.Arn
      Timeout: 10
      Handler: "index.handler"
      Runtime: "nodejs6.10"
      MemorySize: 128

  WritePublicConfigLambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Specifies which resources the "WritePublicConfigLambda" lambda function can access.
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - s3:PutObject
              - s3:GetObject
              - s3:PutObjectAcl
            Resource: !Sub "arn:aws:s3:::${PublicConfigS3Bucket}/${PublicConfigS3Folder}/*"
          - Effect: Allow
            Resource: "arn:aws:logs:*:*:*"
            Action:
              - "logs:CreateLogGroup"
              - "logs:CreateLogStream"
              - "logs:PutLogEvents"

  WritePublicConfigLambdaRole:
    Type: AWS::IAM::Role
    DependsOn:
      - WritePublicConfigLambdaPolicy
    Properties:
      RoleName: !Sub ${AppName}-WritePublicConfig
      ManagedPolicyArns:
        - Ref: WritePublicConfigLambdaPolicy
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com

  # Run the lambda automatically when the stack deploys
  WritePublicConfigCustomResource:
    Type: "Custom::LambdaCallout"
    DependsOn:
      - WritePublicConfigLambda
    Properties:
      ServiceToken: !GetAtt WritePublicConfigLambda.Arn
